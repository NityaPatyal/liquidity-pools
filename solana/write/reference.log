import React, { useState } from "react";
import {
  Raydium,
  TxVersion,
  DEVNET_PROGRAM_ID,
  TickUtils,
} from "@raydium-io/raydium-sdk-v2";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import bs58 from "bs58";
import Decimal from "decimal.js";
 
const connection = new Connection("https://api.devnet.solana.com");
const txVersion = TxVersion.V0;
 
const devConfigs = [
  {
    id: "CQYbhr6amxUER4p5SC44C63R4qw4NFc9Z4Db9vF4tZwG",
    index: 0,
    protocolFeeRate: 120000,
    tradeFeeRate: 100,
    tickSpacing: 10,
    fundFeeRate: 40000,
    description: "Best for very stable pairs",
    defaultRange: 0.005,
    defaultRangePoint: [0.001, 0.003, 0.005, 0.008, 0.01],
  },
];
 
export default function CreatePool() {
  const [privateKey, setPrivateKey] = useState("");
  const [mint1, setMint1] = useState("");
  const [mint2, setMint2] = useState("");
  const [startPrice, setStartPrice] = useState("0.0001");
  const [endPrice, setEndPrice] = useState("100000");
  const [result, setResult] = useState("");
 
  const handleCreatePool = async () => {
    try {
      const owner = Keypair.fromSecretKey(bs58.decode(privateKey));
 
      const raydium = await Raydium.load({
        owner,
        connection,
        cluster: "devnet",
        disableFeatureCheck: true,
        disableLoadToken: false,
        blockhashCommitment: "finalized",
      });
 
      const token1 = await raydium.token.getTokenInfo(mint1);
      const token2 = await raydium.token.getTokenInfo(mint2);
 
      const config = {
        ...devConfigs[0],
        id: new PublicKey(devConfigs[0].id),
        fundOwner: "",
        description: devConfigs[0].description,
      };
 
      // 1. Create the Pool
      const { execute: createPoolExecute, poolId } = await raydium.clmm.createPool({
        programId: DEVNET_PROGRAM_ID.CLMM_PROGRAM_ID,
        mint1: token1,
        mint2: token2,
        ammConfig: config,
        initialPrice: new Decimal(1),
        txVersion,
      });
 
      const { txId: createTxId } = await createPoolExecute({ sendAndConfirm: true });
 
      // 2. Get Pool Info from RPC
      const { poolInfo, poolKeys } = await raydium.clmm.getPoolInfoFromRpc(poolId);
 
      // 3. Calculate Tick Range
      const { tick: lowerTick } = TickUtils.getPriceAndTick({
        poolInfo,
        price: new Decimal(startPrice),
        baseIn: true,
      });
      const { tick: upperTick } = TickUtils.getPriceAndTick({
        poolInfo,
        price: new Decimal(endPrice),
        baseIn: true,
      });
 
      // 4. Create Position (No liquidity)
      const { execute: positionExecute, extInfo } = await raydium.clmm.openPositionFromBase({
        poolInfo,
        poolKeys,
        tickLower: Math.min(lowerTick, upperTick),
        tickUpper: Math.max(lowerTick, upperTick),
        base: "MintA",
        baseAmount: new Decimal(0), // No liquidity
        otherAmountMax: new Decimal(0), // No liquidity
        ownerInfo: {
          useSOLBalance: true,
        },
        txVersion,
        computeBudgetConfig: {
          units: 600000,
          microLamports: 100000,
        },
      });
 
      const { txId: positionTxId } = await positionExecute({ sendAndConfirm: true });
 
      setResult(
        `‚úÖ Pool Created: https://explorer.solana.com/tx/${createTxId}?cluster=devnet\n` +
        `‚úÖ Position Created (No Liquidity): https://explorer.solana.com/tx/${positionTxId}?cluster=devnet\n` +
        `üéâ NFT: ${extInfo.nftMint.toBase58()}`
      );
    } catch (err: any) {
      console.error(err);
      setResult(`‚ùå Error: ${err.message}`);
    }
  };
 
  return (
<div style={{ padding: 20 }}>
<h2>Create CLMM Pool + Create Position Only</h2>
<input
        type="text"
        placeholder="Private Key (Base58)"
        value={privateKey}
        onChange={(e) => setPrivateKey(e.target.value)}
        style={{ width: "100%", marginBottom: 10 }}
      />
<input
        type="text"
        placeholder="Mint Token 1"
        value={mint1}
        onChange={(e) => setMint1(e.target.value)}
        style={{ width: "100%", marginBottom: 10 }}
      />
<input
        type="text"
        placeholder="Mint Token 2"
        value={mint2}
        onChange={(e) => setMint2(e.target.value)}
        style={{ width: "100%", marginBottom: 10 }}
      />
<input
        type="text"
        placeholder="Start Price"
        value={startPrice}
        onChange={(e) => setStartPrice(e.target.value)}
        style={{ width: "100%", marginBottom: 10 }}
      />
<input
        type="text"
        placeholder="End Price"
        value={endPrice}
        onChange={(e) => setEndPrice(e.target.value)}
        style={{ width: "100%", marginBottom: 10 }}
      />
<button onClick={handleCreatePool}>Create Pool & Create Position</button>
<pre style={{ marginTop: 10, whiteSpace: "pre-wrap" }}>{result}</pre>
</div>
  );
}